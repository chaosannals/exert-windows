#pragma once
#include <Windows.h>
#include <TlHelp32.h>
#include <Psapi.h>
#include "pointer.h"
#include "string.h"
#include "vector.h"

namespace ext
{
    struct process_t
    {
        DWORD id;
        string_t filename;
        string_t imagename;
    };

    pointer_t<process_t> find_process(const WCHAR *name)
    {

        return pointer_t<process_t>(nullptr);
    }

    vector_t<process_t> list_processes()
    {
        vector_t<process_t> result;
        handle_t th = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
        if (th == INVALID_HANDLE_VALUE)
        {
            return result;
        }
        PROCESSENTRY32W entry;
        entry.dwSize = sizeof(PROCESSENTRY32W);
        BOOL able = Process32FirstW(th, &entry);
        WCHAR imagename[MAX_PATH];
        while (able)
        {
            process_t one;
            one.id = entry.th32ProcessID;
            one.filename = entry.szExeFile;
            handle_t h = OpenProcess(PROCESS_QUERY_INFORMATION, FALSE, one.id);
            if (GetProcessImageFileNameW(h, imagename, MAX_PATH))
            {
                one.imagename = imagename;
            }
            result.push(one);
            able = Process32NextW(th, &entry);
        }
        return result;
    }
}