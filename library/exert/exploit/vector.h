#pragma once

#include <cstddef>

namespace ext
{
    template <typename T>
    class vector_t
    {
        T *buffer;
        std::size_t size;
        std::size_t capacity;

    public:
        vector_t() : buffer(nullptr), size(0), capacity(0) {}
        ~vector_t()
        {
            if (buffer != nullptr)
            {
                delete[] buffer;
            }
        }
        void push(const T &one)
        {
            if (size >= capacity)
            {
                resize((capacity > 0 ? capacity : 1) << 1);
            }
            std::size_t index = size > 0 ? size - 1 : 0;
            buffer[index] = one;
        }
        T *begin() const
        {
            return buffer;
        }
        T *end() const
        {
            return buffer + size;
        }

    private:
        void resize(std::size_t new_size)
        {
            T *new_buffer = new T[new_size];
            for (std::size_t i; i != size; ++i)
            {
                new_buffer[i] = buffer[i];
            }
            delete[] buffer;
            buffer = new_buffer;
        }
    };
}