#pragma once
#include <cstddef>
#include <Windows.h>

namespace ext
{
    std::size_t get_string_length(const WCHAR *pointer)
    {
        std::size_t result = 0;
        while (pointer[result] != L'\0')
        {
            ++result;
        }
        return result + 1;
    }

    class string_t
    {
        WCHAR *buffer;
        std::size_t size;
        std::size_t capacity;

    private:
        string_t() : buffer(nullptr), size(0), capacity(0) {}
        string_t(const string_t &&lv) : buffer(nullptr), size(lv.size), capacity(lv.capacity)
        {
            buffer = new WCHAR[size];
            for (std::size_t i = 0; i != size; ++i)
            {
                buffer[i] = lv.buffer[i];
            }
        }
        string_t(string_t &&r) : buffer(r.buffer), size(r.size), capacity(r.capacity)
        {
            r.buffer = nullptr;
            r.size = 0;
            r.capacity = 0;
        }
        string_t(const WCHAR *pointer) : string_t()
        {
            size = get_string_length(pointer);
            capacity = size;
            buffer = new WCHAR[size];
            for (std::size_t i = 0; i != size; ++i)
            {
                buffer[i] = pointer[i];
            }
        }
        ~string_t()
        {
            if (buffer != nullptr)
            {
                delete[] buffer;
            }
        }
        operator WCHAR *() const
        {
            return buffer;
        }
    };
}
