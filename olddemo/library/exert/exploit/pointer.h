#pragma once

#include "runtime.h"

namespace ext
{
    template <typename T>
    class pointer_t
    {
        T *pointer;

    public:
        pointer_t(T *p) : pointer(p) {}
        pointer_t(const pointer_t &) = delete;
        pointer_t(pointer_t &&r) : pointer(r.pointer)
        {
            r.pointer = nullptr;
        }
        ~pointer_t()
        {
            if (pointer != nullptr)
            {
                pointer->~T();
                recov(pointer);
            }
        }
        T *operator->()
        {
            return pointer;
        }
        const pointer_t &operator=(T *p)
        {
            ~pointer_t();
            pointer = p;
            return *this;
        }
        operator T *()
        {
            return pointer;
        }
    };

    template <typename T>
    class pointer_t<T[]>
    {
        T *pointer;

    public:
        pointer_t(T *p) : pointer(p) {}
        pointer_t(const pointer_t &) = delete;
        pointer_t(pointer_t &&r) : pointer(r.pointer)
        {
            r.pointer = nullptr;
        }
        ~pointer_t()
        {
            if (pointer != nullptr)
            {
                // ~T();
                recov(pointer);
            }
        }
        const pointer_t &operator=(T *p)
        {
            ~pointer_t();
            pointer = p;
            return *this;
        }
        T *operator->()
        {
            return pointer;
        }
        operator T *()
        {
            return pointer;
        }
    };
}